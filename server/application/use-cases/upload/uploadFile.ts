import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url'; // üëà –Ω—É–∂–Ω–æ –¥–ª—è __dirname –≤ ESM

// üëá –≠–º—É–ª—è—Ü–∏—è __dirname –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const uploadDir = path.join(__dirname, '../../../uploads');

// –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
  destination: (_, __, cb) => {
    cb(null, uploadDir);
  },
  filename: (_, file, cb) => {
    const ext = path.extname(file.originalname).toLowerCase();
    const base = path.basename(file.originalname, ext);
    const timestamp = Date.now();
    const safeName = `${base}-${timestamp}${ext}`;
    cb(null, safeName);
  },
});

const allowedMimeTypes = [
  'image/png', 'image/jpeg', 'image/webp', 'image/gif',
  'video/mp4', 'audio/mpeg',
  'application/pdf', 'text/plain', 'application/zip',
];

const allowedExtensions = [
  '.png', '.jpg', '.jpeg', '.webp', '.gif',
  '.mp4', '.mp3',
  '.pdf', '.txt', '.zip',
];

const blockedExtensions = [
  '.exe', '.js', '.bat', '.cmd', '.scr', '.vbs', '.com', '.msi', '.dll',
];

const fileFilter = (_: any, file: Express.Multer.File, cb: any) => {
  const ext = path.extname(file.originalname).toLowerCase();
  const mime = file.mimetype;

  if (blockedExtensions.includes(ext)) {
    return cb(new Error('‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞'), false);
  }

  if (!allowedMimeTypes.includes(mime)) {
    return cb(new Error('‚ùå MIME-—Ç–∏–ø –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω'), false);
  }

  if (!allowedExtensions.includes(ext)) {
    return cb(new Error('‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ'), false);
  }

  cb(null, true);
};

export const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 25 * 1024 * 1024, // 25MB
  },
});

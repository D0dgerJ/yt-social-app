import prisma from "../../../infrastructure/database/prismaClient.ts";

interface MarkDeliveredInput {
  conversationId: number;
  userId: number;
}

export const markMessagesAsDelivered = async ({ conversationId, userId }: MarkDeliveredInput) => {
  try {
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–µ—Å–µ–¥—ã
    const isParticipant = await prisma.participant.findFirst({
      where: {
        conversationId,
        userId,
      },
    });

    if (!isParticipant) {
      throw new Error("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞");
    }

    // üì¶ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
    const result = await prisma.message.updateMany({
      where: {
        conversationId,
        senderId: {
          not: userId,
        },
        isDelivered: false,
        isDeleted: false,
      },
      data: {
        isDelivered: true,
      },
    });

    return { updated: result.count };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ delivered:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å delivered");
  }
};

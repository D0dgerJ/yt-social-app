import prisma from '../../../infrastructure/database/prismaClient.ts';

interface LeaveConversationInput {
  conversationId: number;
  userId: number;        // –ö–æ–≥–æ —É–¥–∞–ª—è–µ–º
  requestedById: number; // –ö—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
}

export const leaveConversation = async ({ conversationId, userId, requestedById }: LeaveConversationInput) => {
  try {
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
    const participant = await prisma.participant.findFirst({
      where: {
        conversationId,
        userId,
      },
    });

    if (!participant) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞");
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω —É–¥–∞–ª—è–µ—Ç –Ω–µ —Å–µ–±—è
    if (requestedById !== userId) {
      const requester = await prisma.participant.findFirst({
        where: {
          conversationId,
          userId: requestedById,
        },
      });

      if (!requester || !["admin", "owner"].includes(requester.role)) {
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞");
      }

      // –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
      if (participant.role === "owner") {
        throw new Error("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞");
      }
    }

    // üßπ –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await prisma.participant.delete({
      where: { id: participant.id },
    });

    // üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    const remaining = await prisma.participant.count({
      where: { conversationId },
    });

    if (remaining === 0) {
      // üí• –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–æ–±—â–µ–Ω–∏—è + —á–∞—Ç)
      await prisma.message.deleteMany({ where: { conversationId } });
      await prisma.conversation.delete({ where: { id: conversationId } });

      return { conversationDeleted: true };
    }

    return { conversationDeleted: false };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞:", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞");
  }
};

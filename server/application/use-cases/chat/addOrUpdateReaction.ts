import prisma from "../../../infrastructure/database/prismaClient.ts";

interface AddReactionInput {
  userId: number;
  messageId: number;
  emoji: string;
}

export const addOrUpdateReaction = async ({ userId, messageId, emoji }: AddReactionInput) => {
  try {
    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–æ
    const message = await prisma.message.findUnique({
      where: { id: messageId },
      select: { id: true, isDeleted: true, conversationId: true },
    });

    if (!message || message.isDeleted) {
      throw new Error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ");
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–µ—Å–µ–¥—ã
    const isParticipant = await prisma.participant.findFirst({
      where: {
        conversationId: message.conversationId,
        userId,
      },
    });

    if (!isParticipant) {
      throw new Error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º");
    }

    // üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—è
    const existing = await prisma.reaction.findFirst({
      where: { userId, messageId },
    });

    if (existing) {
      if (existing.emoji === emoji) {
        // üßπ –£–¥–∞–ª–µ–Ω–∏–µ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ = –æ—Ç–º–µ–Ω–∞)
        await prisma.reaction.delete({ where: { id: existing.id } });

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å emit –∫ WebSocket: reactionRemoved
        return null;
      } else {
        // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
        const updated = await prisma.reaction.update({
          where: { id: existing.id },
          data: { emoji },
        });

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å emit: reactionUpdated
        return updated;
      }
    }

    // üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    const created = await prisma.reaction.create({
      data: {
        userId,
        messageId,
        emoji,
      },
    });

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å emit: reactionAdded
    return created;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é");
  }
};

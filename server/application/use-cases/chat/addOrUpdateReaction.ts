import prisma from "../../../infrastructure/database/prismaClient.ts";

interface AddReactionInput {
  userId: number;
  messageId: number;
  emoji: string;
}

export const addOrUpdateReaction = async ({ userId, messageId, emoji }: AddReactionInput) => {
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–æ
  const message = await prisma.message.findUnique({
    where: { id: messageId },
    select: { isDeleted: true },
  });

  if (!message || message.isDeleted) {
    throw new Error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ");
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existing = await prisma.reaction.findFirst({
    where: { userId, messageId },
  });

  if (existing) {
    if (existing.emoji === emoji) {
      // üßπ –û—Ç–º–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ)
      await prisma.reaction.delete({ where: { id: existing.id } });
      return null;
    } else {
      // üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
      return await prisma.reaction.update({
        where: { id: existing.id },
        data: { emoji },
      });
    }
  }

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏
  return await prisma.reaction.create({
    data: {
      userId,
      messageId,
      emoji,
    },
  });
};

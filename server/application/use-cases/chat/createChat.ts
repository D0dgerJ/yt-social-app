import prisma from "../../../infrastructure/database/prismaClient.ts";
import { createChatSchema } from "../../../validation/chatSchemas.ts";

interface CreateChatInput {
  userIds: number[];
  name?: string;
  creatorId: number;
}

export const createChat = async (data: CreateChatInput) => {
  try {
    const { userIds: rawUserIds, name, creatorId } = createChatSchema.parse(data);

    // –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    const userIds = Array.from(new Set([...rawUserIds, creatorId]));

    if (userIds.length < 2) {
      throw new Error("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞");
    }

    const isGroup = userIds.length > 2 || !!name;

    // üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
    if (!isGroup) {
      const existing = await prisma.conversation.findMany({
        where: {
          isGroup: false,
          participants: {
            some: { userId: userIds[0] },
          },
        },
        include: { participants: true },
      });

      const found = existing.find(conv => {
        const ids = conv.participants.map(p => p.userId).sort();
        return ids.length === 2 && ids.includes(userIds[0]) && ids.includes(userIds[1]);
      });

      if (found) return found;
    }

    // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const conversation = await prisma.conversation.create({
      data: {
        name: isGroup ? name || "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç" : null,
        isGroup,
        participants: {
          create: userIds.map(userId => ({
            user: { connect: { id: userId } },
            role: userId === creatorId ? "owner" : "member",
          })),
        },
      },
      include: {
        participants: {
          include: { user: true },
        },
      },
    });

    return conversation;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç");
  }
};

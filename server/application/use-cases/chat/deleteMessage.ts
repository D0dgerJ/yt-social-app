import prisma from "../../../infrastructure/database/prismaClient.ts";
import { getIO } from "../../../infrastructure/websocket/socket.ts";

interface DeleteMessageInput {
  messageId: number;
  userId: number; // <- –∫—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å
}

export const deleteMessage = async ({ messageId, userId }: DeleteMessageInput) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = await prisma.message.findUnique({
    where: { id: messageId },
  });

  if (!message) {
    throw new Error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å
  if (message.senderId !== userId) {
    throw new Error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
  }

  const deleted = await prisma.message.delete({
    where: { id: messageId },
  });

  // üì° Socket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  getIO().to(String(message.conversationId)).emit("messageDeleted", {
    messageId: deleted.id,
    conversationId: message.conversationId,
  });

  return deleted;
};

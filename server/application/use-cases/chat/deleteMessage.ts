import prisma from "../../../infrastructure/database/prismaClient.ts";
import { getIO } from "../../../infrastructure/websocket/socket.ts";

interface DeleteMessageInput {
  messageId: number;
  userId: number;
}

export const deleteMessage = async ({ messageId, userId }: DeleteMessageInput) => {
  try {
    const message = await prisma.message.findUnique({
      where: { id: messageId },
    });

    if (!message) {
      throw new Error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }

    if (message.senderId !== userId) {
      throw new Error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    // üîï –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (soft delete)
    const softDeleted = await prisma.message.update({
      where: { id: messageId },
      data: {
        encryptedContent: null,
        mediaUrl: null,
        mediaType: null,
        fileName: null,
        gifUrl: null,
        stickerUrl: null,
        audioText: null,
        isDeleted: true,
        deletedAt: new Date(),
      },
    });

    // üß† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastMessageId, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const conversation = await prisma.conversation.findUnique({
      where: { id: message.conversationId },
      select: { lastMessageId: true },
    });

    if (conversation?.lastMessageId === messageId) {
      const previous = await prisma.message.findFirst({
        where: {
          conversationId: message.conversationId,
          isDeleted: false,
          id: { lt: messageId },
        },
        orderBy: { id: "desc" },
      });

      await prisma.conversation.update({
        where: { id: message.conversationId },
        data: {
          lastMessageId: previous?.id ?? null,
          updatedAt: new Date(),
        },
      });
    }

    // üì° WebSocket: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    getIO().to(String(message.conversationId)).emit("messageDeleted", {
      messageId: softDeleted.id,
      conversationId: message.conversationId,
    });

    return softDeleted;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
  }
};

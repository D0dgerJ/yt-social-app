import prisma from "../../../infrastructure/database/prismaClient.ts";

interface UpdateMessageInput {
  messageId: number;
  userId: number;
  encryptedContent?: string;
  mediaUrl?: string | null;
  mediaType?: 'image' | 'video' | 'file' | 'gif' | 'audio' | 'text' | 'sticker' | null;
  fileName?: string | null;
  gifUrl?: string | null;
  stickerUrl?: string | null;
  repliedToId?: number | null;
}

export const updateMessage = async (data: UpdateMessageInput) => {
  try {
    const {
      messageId,
      userId,
      encryptedContent,
      mediaUrl,
      mediaType,
      fileName,
      gifUrl,
      stickerUrl,
      repliedToId,
    } = data;

    const existingMessage = await prisma.message.findUnique({
      where: { id: messageId },
    });

    if (!existingMessage) throw new Error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    if (existingMessage.senderId !== userId) {
      throw new Error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ repliedToId (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if (repliedToId) {
      const repliedTo = await prisma.message.findUnique({
        where: { id: repliedToId },
      });

      if (!repliedTo || repliedTo.conversationId !== existingMessage.conversationId) {
        throw new Error("–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—Ä–µ—â—ë–Ω");
      }
    }

    const updated = await prisma.message.update({
      where: { id: messageId },
      data: {
        encryptedContent,
        mediaUrl,
        mediaType,
        fileName,
        gifUrl,
        stickerUrl,
        repliedToId,
        isEdited: true,
        editedAt: new Date(),
      },
      include: {
        sender: {
          select: {
            id: true,
            username: true,
            profilePicture: true,
          },
        },
        repliedTo: {
          select: {
            id: true,
            encryptedContent: true,
            senderId: true,
            mediaUrl: true,
            mediaType: true,
          },
        },
      },
    });

    // üì° TODO: –£–≤–µ–¥–æ–º–∏—Ç—å —Ñ—Ä–æ–Ω—Ç –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (–ø–æ WebSocket)
    // getIO().to(String(existingMessage.conversationId)).emit("messageUpdated", updated);

    return updated;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
  }
};

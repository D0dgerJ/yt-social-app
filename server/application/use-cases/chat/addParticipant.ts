import prisma from '../../../infrastructure/database/prismaClient.ts';

interface AddParticipantInput {
  conversationId: number;
  userId: number;
  role?: 'member' | 'admin' | 'owner'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî member
}

export const addParticipant = async ({
  conversationId,
  userId,
  role = 'member',
}: AddParticipantInput) => {
  try {
    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
    const conversation = await prisma.conversation.findUnique({
      where: { id: conversationId },
    });

    if (!conversation) {
      throw new Error("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // üë• –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    const isAlreadyParticipant = await prisma.participant.findFirst({
      where: {
        conversationId,
        userId,
      },
    });

    if (isAlreadyParticipant) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ");
    }

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participant = await prisma.participant.create({
      data: {
        conversationId,
        userId,
        role,
      },
      include: {
        user: {
          select: {
            id: true,
            username: true,
            profilePicture: true,
          },
        },
      },
    });

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
    // getIO().to(String(conversationId)).emit("participantAdded", participant);

    return participant;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞");
  }
};

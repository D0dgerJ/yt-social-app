import prisma from "../../../infrastructure/database/prismaClient.ts";
import { sendMessageSchema } from "../../../validation/chatSchemas.ts";
import { getIO } from "../../../infrastructure/websocket/socket.ts";
import { redisPub } from "../../../infrastructure/redis/redisClient.ts";

interface SendMessageInput {
  conversationId: number;
  encryptedContent?: string;
  senderId: number; // –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (req.user.id)
  mediaUrl?: string;
  mediaType?: 'image' | 'video' | 'file' | 'gif' | 'audio' | 'text' | 'sticker';
  fileName?: string;
  gifUrl?: string;
  stickerUrl?: string;
  repliedToId?: number;
}

export const sendMessage = async (input: SendMessageInput) => {
  try {
    const data = sendMessageSchema.parse(input);

    const {
      conversationId,
      senderId,
      encryptedContent,
      mediaUrl,
      mediaType,
      fileName,
      gifUrl,
      stickerUrl,
      repliedToId,
    } = data;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const isParticipant = await prisma.participant.findFirst({
      where: {
        conversationId,
        userId: senderId,
      },
    });

    if (!isParticipant) {
      throw new Error("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞");
    }

    // üîê TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–µ–¥–∏–∞ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    // üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = await prisma.message.create({
      data: {
        conversationId,
        senderId,
        encryptedContent,
        mediaUrl,
        mediaType,
        fileName,
        gifUrl,
        stickerUrl,
        repliedToId,
      },
      include: {
        sender: {
          select: {
            id: true,
            username: true,
            profilePicture: true,
          },
        },
        repliedTo: {
          select: {
            id: true,
            encryptedContent: true,
            senderId: true,
            mediaUrl: true,
            mediaType: true,
          },
        },
      },
    });

    // üïí –û–±–Ω–æ–≤–ª—è–µ–º lastMessageId –∏ –≤—Ä–µ–º—è
    await prisma.conversation.updateMany({
      where: { id: conversationId },
      data: {
        lastMessageId: message.id,
        updatedAt: new Date(),
      },
    });

    // üì° WebSocket ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    getIO().to(String(conversationId)).emit("receiveMessage", message);

    // üì£ Redis Pub/Sub ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
    await redisPub.publish("newMessage", JSON.stringify(message));

    return message;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
  }
};

import prisma from "../../../infrastructure/database/prismaClient.ts";
import { sendMessageSchema } from "../../../validation/chatSchemas.ts";
import { getIO } from "../../../infrastructure/websocket/socket.ts";

interface SendMessageInput {
  conversationId: number;
  encryptedContent?: string;
  senderId: number;
  mediaUrl?: string | null;
  mediaType?: 'image' | 'video' | 'file' | 'gif' | 'audio' | 'text' | 'sticker';
  fileName?: string;
  gifUrl?: string;
  stickerUrl?: string;
  repliedToId?: number;
}

export const sendMessage = async (input: SendMessageInput) => {
  try {
    const data = sendMessageSchema.parse(input);

    const {
      conversationId,
      senderId,
      encryptedContent,
      mediaUrl,
      mediaType,
      fileName,
      gifUrl,
      stickerUrl,
      repliedToId,
    } = data;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isParticipant = await prisma.participant.findFirst({
      where: {
        conversationId,
        userId: senderId,
      },
    });

    if (!isParticipant) {
      throw new Error("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞");
    }

    // ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ repliedToId –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Ç–∞
    if (repliedToId) {
      const original = await prisma.message.findUnique({
        where: { id: repliedToId },
      });

      if (!original || original.conversationId !== conversationId) {
        throw new Error("–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—Ä–µ—â—ë–Ω");
      }
    }

    // üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = await prisma.message.create({
      data: {
        conversationId,
        senderId,
        encryptedContent,
        mediaUrl,
        mediaType,
        fileName,
        gifUrl,
        stickerUrl,
        repliedToId,
      },
      include: {
        sender: {
          select: {
            id: true,
            username: true,
            profilePicture: true,
          },
        },
        repliedTo: {
          select: {
            id: true,
            encryptedContent: true,
            senderId: true,
            mediaUrl: true,
            mediaType: true,
          },
        },
      },
    });

    // üïí –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
    await prisma.conversation.update({
      where: { id: conversationId },
      data: {
        lastMessageId: message.id,
        updatedAt: new Date(),
      },
    });

    // üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ WebSocket
    getIO().to(String(conversationId)).emit("receiveMessage", message);

    return message;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
  }
};

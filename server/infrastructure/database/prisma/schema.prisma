// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  username       String  @unique
  email          String  @unique
  password       String
  profilePicture String? // Cloudinary URL
  coverPicture   String? // Cloudinary URL
  desc           String? @default("")
  isAdmin        Boolean @default(false)
  from           String? @default("Ghana")
  city           String? @default("Accra")
  relationship   Int?    @default(1)

  posts        Post[]
  likes        Like[]
  comments     Comment[]
  commentLikes CommentLike[]
  messages     Message[]
  savedPosts   SavedPost[]
  stories      Story[]
  storyViews   StoryView[]

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  notificationsFrom Notification[] @relation("NotificationFrom")
  notificationsTo   Notification[] @relation("NotificationTo")

  followedBy Follow[] @relation("FollowedBy")
  following  Follow[] @relation("Following")

  participants Participant[]

  messageReactions Reaction[]

  encryptionKeys    EncryptionKey[]
  reportsSent       Report[]          @relation("ReportsSent")
  mediaFiles        MediaFile[]
  messageDeliveries MessageDelivery[]
  devices           Device[]
  messageMentions   Message[]         @relation("MessageMentions")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Post {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  desc      String?
  mediaUrl  String?
  mediaType String      @default("image") // image / video
  likes     Like[]
  comments  Comment[]
  savedBy   SavedPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  images String[] @default([]) // –º–∞—Å—Å–∏–≤ URL-–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  videos String[] @default([]) // –º–∞—Å—Å–∏–≤ URL-–æ–≤ –∫ –≤–∏–¥–µ–æ
  files  String[] @default([]) // –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã

  tags     String[] @default([]) // –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
  location String? // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞ –∏ —Ç.–ø.)
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId], name: "userId_postId")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  images    String[] @default([])
  videos    String[] @default([])
  files     String[] @default([])
  createdAt DateTime @default(now())

  // üí¨ Replies
  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  // üîó Relations
  post  Post          @relation(fields: [postId], references: [id])
  user  User          @relation(fields: [userId], references: [id])
  likes CommentLike[]

  // track who was mentioned
  // mentions   User[] @relation("CommentMentions", references: [id])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId], name: "userId_commentId")
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Following", fields: [followerId], references: [id])
  following   User @relation("FollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "followerId_followingId")
}

model Notification {
  id         Int      @id @default(autoincrement())
  type       String // 'like', 'comment', 'follow', etc.
  content    String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  fromUser   User     @relation("NotificationFrom", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User     @relation("NotificationTo", fields: [toUserId], references: [id])
  toUserId   Int
}

model SavedPost {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId], name: "userId_postId")
}

model Story {
  id        Int         @id @default(autoincrement())
  mediaUrl  String
  mediaType String // 'image' | 'video'
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  expiresAt DateTime
  views     StoryView[]
}

model StoryView {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId])
}

model Conversation {
  id        Int      @id @default(autoincrement())
  name      String? // —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants Participant[]
  messages     Message[]

  lastMessageId Int?     @unique
  lastMessage   Message? @relation("LastMessage", fields: [lastMessageId], references: [id])
}

model Participant {
  id             Int          @id @default(autoincrement())
  userId         Int
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  joinedAt             DateTime  @default(now())
  isOnline             Boolean   @default(false)
  receiveNotifications Boolean   @default(true)
  role                 String    @default("member") // member | admin | owner
  mutedUntil           DateTime? // –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

  @@unique([userId, conversationId])
}

model Message {
  id             Int @id @default(autoincrement())
  conversationId Int
  senderId       Int

  encryptedContent String?
  mediaUrl         String?
  mediaType        String? // image | video | file | gif | audio | text
  fileName         String?
  gifUrl           String?
  stickerUrl       String?
  audioText        String?

  audioOriginalUrl String? // URL –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
  audioUrl         String? // URL —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  audioMime        String? // –∏—Ç–æ–≥–æ–≤—ã–π MIME
  audioDurationSec Int? // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  audioWaveform    Int[]             @default([]) // –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–æ–ª–Ω–∞ (32‚Äì64 –∑–Ω–∞—á–µ–Ω–∏–π)
  processingStatus ProcessingStatus? // PENDING | PROCESSING | READY | FAILED

  isDelivered Boolean   @default(false)
  isRead      Boolean   @default(false)
  isEdited    Boolean   @default(false)
  editedAt    DateTime?

  repliedToId Int?
  repliedTo   Message?  @relation("MessageReplies", fields: [repliedToId], references: [id])
  replies     Message[] @relation("MessageReplies")

  conversation                Conversation  @relation(fields: [conversationId], references: [id])
  conversationWithLastMessage Conversation? @relation("LastMessage")
  sender                      User          @relation(fields: [senderId], references: [id])
  reactions                   Reaction[]
  createdAt                   DateTime      @default(now())

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  mentions User[] @relation("MessageMentions")

  reports    Report[]
  mediaFiles MediaFile[]
  deliveries MessageDelivery[]

  clientMessageId String? @unique

  @@index([conversationId, createdAt])
  @@index([conversationId, editedAt])
  @@index([conversationId, deletedAt])
  @@index([processingStatus, createdAt])
}

model EncryptionKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  deviceId  String // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  publicKey String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
}

model Report {
  id         Int      @id @default(autoincrement())
  reporterId Int
  messageId  Int
  reason     String
  type       String   @default("abuse") // abuse | spam | csam | terror | other
  createdAt  DateTime @default(now())
  status     String   @default("pending") // pending | reviewed | banned | rejected

  reporter User    @relation("ReportsSent", fields: [reporterId], references: [id])
  message  Message @relation(fields: [messageId], references: [id])
}

model MediaFile {
  id   Int    @id @default(autoincrement())
  url  String
  type String // image, video, audio, file, sticker, gif

  originalName String?
  mime         String? // –Ω–∞–ø—Ä–∏–º–µ—Ä "application/pdf" –∏–ª–∏ "image/png"
  size         Int?

  uploaderId Int
  uploadedAt DateTime @default(now())

  uploader User @relation(fields: [uploaderId], references: [id])

  messageId Int?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageDelivery {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  status    String   @default("sent") // sent | delivered | read
  timestamp DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
}

model Device {
  id        String   @id // UUID –∏–ª–∏ fingerprint
  userId    Int
  name      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String // –Ω–∞–ø—Ä–∏–º–µ—Ä, ‚ù§Ô∏è, üòÇ, üëç
  userId    Int
  messageId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId]) // –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–¥–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
  @@index([messageId, createdAt])
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  READY
  FAILED
}

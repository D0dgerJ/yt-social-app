// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  username          String          @unique
  email             String          @unique
  password          String
  profilePicture    String? // Cloudinary URL
  coverPicture      String? // Cloudinary URL
  desc              String?         @default("")
  isAdmin           Boolean         @default(false)
  from              String?         @default("Ghana")
  city              String?         @default("Accra")
  relationship      Int?            @default(1)
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  commentLikes      CommentLike[]
  messages          Message[]
  savedPosts        SavedPost[]
  stories           Story[]
  notificationsFrom Notification[]  @relation("NotificationFrom")
  notificationsTo   Notification[]  @relation("NotificationTo")
  followedBy        Follow[]        @relation("FollowedBy")
  following         Follow[]        @relation("Following")
  storyViews        StoryView[]
  participants      Participant[]
  sentRequests      FriendRequest[] @relation("SentRequests")
  receivedRequests  FriendRequest[] @relation("ReceivedRequests")
  messageReactions  Reaction[]
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Post {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  desc      String?
  mediaUrl  String?
  mediaType String      @default("image") // image / video
  likes     Like[]
  comments  Comment[]
  savedBy   SavedPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  images String[] @default([]) // –º–∞—Å—Å–∏–≤ URL-–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  videos String[] @default([]) // –º–∞—Å—Å–∏–≤ URL-–æ–≤ –∫ –≤–∏–¥–µ–æ
  files  String[] @default([]) // –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã

  tags     String[] @default([]) // –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
  location String? // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞ –∏ —Ç.–ø.)
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId], name: "userId_postId")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  images    String[] @default([])
  videos    String[] @default([])
  files     String[] @default([])
  createdAt DateTime @default(now())

  // üí¨ Replies
  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  // üîó Relations
  post  Post          @relation(fields: [postId], references: [id])
  user  User          @relation(fields: [userId], references: [id])
  likes CommentLike[]

  // track who was mentioned
  // mentions   User[] @relation("CommentMentions", references: [id])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId], name: "userId_commentId")
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Following", fields: [followerId], references: [id])
  following   User @relation("FollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "followerId_followingId")
}

model Notification {
  id         Int      @id @default(autoincrement())
  type       String // 'like', 'comment', 'follow', etc.
  content    String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  fromUser   User     @relation("NotificationFrom", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User     @relation("NotificationTo", fields: [toUserId], references: [id])
  toUserId   Int
}

model SavedPost {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId], name: "userId_postId")
}

model Story {
  id        Int         @id @default(autoincrement())
  mediaUrl  String
  mediaType String // 'image' | 'video'
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  expiresAt DateTime
  views     StoryView[]
}

model StoryView {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId])
}

model Conversation {
  id           Int           @id @default(autoincrement())
  name         String? // –ù–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
  isGroup      Boolean       @default(false)
  participants Participant[] // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ—Å–µ–¥—ã
  messages     Message[]
  createdAt    DateTime      @default(now())
}

model Participant {
  id                   Int          @id @default(autoincrement())
  userId               Int
  conversationId       Int
  user                 User         @relation(fields: [userId], references: [id])
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  joinedAt             DateTime     @default(now())
  receiveNotifications Boolean      @default(true)
  isOnline             Boolean      @default(false)

  @@unique([userId, conversationId])
}

model Message {
  id             Int       @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String?
  mediaUrl       String? // –§–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª
  mediaType      String? // image | video | file | gif | audio | text
  fileName       String? // –¥–ª—è —Ñ–∞–π–ª–æ–≤: PDF, DOC –∏ —Ç.–¥.
  gifUrl         String? // –¥–ª—è GIF-—Å—Å—ã–ª–æ–∫
  isDelivered    Boolean   @default(false)
  isRead         Boolean   @default(false)
  repliedToId    Int?
  repliedTo      Message?  @relation("RepliedTo", fields: [repliedToId], references: [id])
  replies        Message[] @relation("RepliedTo")
  createdAt      DateTime  @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])
  reactions    Reaction[]
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  messageId Int
  userId    Int
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId]) // –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–¥–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
}

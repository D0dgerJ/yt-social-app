// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  username       String      @unique
  email          String      @unique
  password       String
  profilePicture String?     // Cloudinary URL
  coverPicture   String?     // Cloudinary URL
  isAdmin        Boolean     @default(false)
  from           String?     @default("Ghana")
  city           String?     @default("Accra")
  relationship   Int?        @default(1)
  posts          Post[]
  likes          Like[]
  comments       Comment[]
  messages       Message[]
  savedPosts     SavedPost[]
  stories        Story[]
  notificationsFrom Notification[] @relation("NotificationFrom")
  notificationsTo   Notification[] @relation("NotificationTo")
  followedBy     Follow[]    @relation("FollowedBy")
  following      Follow[]    @relation("Following")
  storyViews  StoryView[]
  participants   Participant[] 
}

model Post {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  desc       String?
  mediaUrl   String?
  mediaType  String      @default("image") // image / video
  likes      Like[]
  comments   Comment[]
  savedBy    SavedPost[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Following", fields: [followerId], references: [id])
  following   User @relation("FollowedBy", fields: [followingId], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  type       String   // 'like', 'comment', 'follow', etc.
  content    String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  fromUser   User     @relation("NotificationFrom", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User     @relation("NotificationTo", fields: [toUserId], references: [id])
  toUserId   Int
}

model SavedPost {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Story {
  id        Int      @id @default(autoincrement())
  mediaUrl  String
  mediaType String   // 'image' | 'video'
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  views      StoryView[]
}

model StoryView {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  createdAt DateTime @default(now())

  user   User  @relation(fields: [userId], references: [id])
  story  Story @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId])
}

model Conversation {
  id           Int             @id @default(autoincrement())
  name         String?         // Название беседы (только для групп)
  isGroup      Boolean         @default(false)
  participants Participant[]   // Участники беседы
  messages     Message[]
  createdAt    DateTime        @default(now())
}

model Participant {
  id             Int           @id @default(autoincrement())
  userId         Int
  conversationId Int
  user           User          @relation(fields: [userId], references: [id])
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  joinedAt       DateTime      @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             Int            @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String?
  mediaUrl       String?        // Фото/видео
  createdAt      DateTime       @default(now())
  
  conversation   Conversation   @relation(fields: [conversationId], references: [id])
  sender         User           @relation(fields: [senderId], references: [id])
}
